{
  "hash": "51e20407022211914886705f3963d5a5",
  "result": {
    "engine": "jupyter",
    "markdown": "# Uso básico de la API de OpenAI\n\nEste tutorial muestra cómo usar la API de OpenAI con la biblioteca oficial\n\n\n## Configuración Inicial\n\nImportamos las librerías necesarias y cargamos las variables de entorno.\n\n::: {#727dffa5 .cell execution_count=1}\n``` {.python .cell-code}\nfrom openai import OpenAI\nimport os\nfrom dotenv import load_dotenv\n\nload_dotenv()  # Carga el archivo de las variables de entorno\n\napi_key = os.getenv('OPENAI_API_KEY')\nclient = OpenAI(api_key=api_key)\n```\n:::\n\n\n## Solicitud a la API\n\nUsamos el modelo gpt-4o-mini para enviar un mensaje y obtener una respuesta.\n\n::: {#72ab4fd2 .cell execution_count=2}\n``` {.python .cell-code}\ncompletion = client.chat.completions.create(\n    model='gpt-4o-mini',\n    messages=[\n        {\n            'role': 'user',\n            'content': '¡Hola! ¿Me ayudas a aprender sobre la API de OpenAI'\n        }\n    ]\n)\n```\n:::\n\n\n## Ver la respuesta\n\nExtraemos el contenido de la respuesta del asistente.\n\n::: {#74d7877e .cell execution_count=3}\n``` {.python .cell-code}\ncompletion.choices[0].message\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nChatCompletionMessage(content='¡Hola! Claro que sí, estaré encantado de ayudarte a aprender sobre la API de OpenAI. \\n\\n### ¿Qué es la API de OpenAI?\\nLa API de OpenAI proporciona acceso a modelos de inteligencia artificial avanzados, como GPT-3 y otros, que pueden ser utilizados para tareas como generación de texto, traducción, resumen, entre otros.\\n\\n### Cómo empezar\\n\\n1. **Registro y Obtención de Claves**: Primero, necesitas registrarte en el sitio de OpenAI y obtener una clave de API. Esta clave te permitirá autenticarte y hacer llamadas a la API.\\n\\n2. **Documentación**: Es fundamental familiarizarse con la [documentación oficial de OpenAI](https://platform.openai.com/docs/). Allí encontrarás ejemplos, guías y referencias sobre cómo usar la API.\\n\\n3. **Integración**: Puedes hacer llamadas a la API utilizando varios lenguajes de programación. Algunos de los más comunes son Python, JavaScript, y otros. Aquí te muestro un ejemplo simple usando Python:\\n\\n    ```python\\n    import openai\\n\\n    openai.api_key = \\'tu_clave_api\\'\\n\\n    response = openai.ChatCompletion.create(\\n        model=\"gpt-3.5-turbo\",\\n        messages=[\\n            {\"role\": \"user\", \"content\": \"Hola, ¿qué puedes hacer?\"}\\n        ]\\n    )\\n\\n    print(response[\\'choices\\'][0][\\'message\\'][\\'content\\'])\\n    ```\\n\\n### Principales funcionalidades\\n\\n1. **Generación de texto**: Puedes generar texto a partir de un prompt inicial.\\n2. **Chat**: Puedes tener conversaciones interactivas con el modelo como si fuera un chatbot.\\n3. **Asistente de programación**: Puedes pedir ayuda con código, soluciones a problemas y más.\\n4. **Análisis de texto**: Puedes pedir resúmenes, explicaciones o análisis sobre textos.\\n\\n### Mejores Prácticas\\n\\n- **Uso de prompts claros**: Asegúrate de que los prompts sean específicos y claros para obtener mejores resultados.\\n- **Manejo de tokens**: La API tiene límites de tokens por solicitud, así que es importante mantener un control sobre la longitud de los textos que envías y recibes.\\n- **Gestión de errores**: Implementa un manejo adecuado de errores para responder a posibles fallos en las solicitudes.\\n\\n### Caso de uso\\n\\nLa API de OpenAI tiene múltiples aplicaciones, como chatbots, asistentes virtuales, generación de contenido para blogs, y mucho más.\\n\\nSi tienes alguna pregunta específica o un área en la que te gustaría profundizar más, ¡dímelo!', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)\n```\n:::\n:::\n\n\n## Mostrar la respuesta en formato Markdown\n\nUtilizamos IPyhton para mostrar el contenido como texto formateado.\n\n::: {#956fd442 .cell execution_count=4}\n``` {.python .cell-code}\nfrom IPython.display import display, Markdown\ndisplay(Markdown(completion.choices[0].message.content))\n```\n\n::: {.cell-output .cell-output-display .cell-output-markdown}\n¡Hola! Claro que sí, estaré encantado de ayudarte a aprender sobre la API de OpenAI. \n\n### ¿Qué es la API de OpenAI?\nLa API de OpenAI proporciona acceso a modelos de inteligencia artificial avanzados, como GPT-3 y otros, que pueden ser utilizados para tareas como generación de texto, traducción, resumen, entre otros.\n\n### Cómo empezar\n\n1. **Registro y Obtención de Claves**: Primero, necesitas registrarte en el sitio de OpenAI y obtener una clave de API. Esta clave te permitirá autenticarte y hacer llamadas a la API.\n\n2. **Documentación**: Es fundamental familiarizarse con la [documentación oficial de OpenAI](https://platform.openai.com/docs/). Allí encontrarás ejemplos, guías y referencias sobre cómo usar la API.\n\n3. **Integración**: Puedes hacer llamadas a la API utilizando varios lenguajes de programación. Algunos de los más comunes son Python, JavaScript, y otros. Aquí te muestro un ejemplo simple usando Python:\n\n    ```python\n    import openai\n\n    openai.api_key = 'tu_clave_api'\n\n    response = openai.ChatCompletion.create(\n        model=\"gpt-3.5-turbo\",\n        messages=[\n            {\"role\": \"user\", \"content\": \"Hola, ¿qué puedes hacer?\"}\n        ]\n    )\n\n    print(response['choices'][0]['message']['content'])\n    ```\n\n### Principales funcionalidades\n\n1. **Generación de texto**: Puedes generar texto a partir de un prompt inicial.\n2. **Chat**: Puedes tener conversaciones interactivas con el modelo como si fuera un chatbot.\n3. **Asistente de programación**: Puedes pedir ayuda con código, soluciones a problemas y más.\n4. **Análisis de texto**: Puedes pedir resúmenes, explicaciones o análisis sobre textos.\n\n### Mejores Prácticas\n\n- **Uso de prompts claros**: Asegúrate de que los prompts sean específicos y claros para obtener mejores resultados.\n- **Manejo de tokens**: La API tiene límites de tokens por solicitud, así que es importante mantener un control sobre la longitud de los textos que envías y recibes.\n- **Gestión de errores**: Implementa un manejo adecuado de errores para responder a posibles fallos en las solicitudes.\n\n### Caso de uso\n\nLa API de OpenAI tiene múltiples aplicaciones, como chatbots, asistentes virtuales, generación de contenido para blogs, y mucho más.\n\nSi tienes alguna pregunta específica o un área en la que te gustaría profundizar más, ¡dímelo!\n:::\n:::\n\n\n## Ver el rol del mensaje\n\n::: {#b8247739 .cell execution_count=5}\n``` {.python .cell-code}\nprint(completion.choices[0].message.role)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nassistant\n```\n:::\n:::\n\n\n## Conclusiones\n\n- Este ejemplo muestra cómo configurar y hacer un request básico a la API.\n- Puedes cambiar el modelo (gpt-4o-mini, gpt-3.5-turbo, etc.) según tus necesidades.\n- El uso de Markdown en la salida más legible la respuesta.\n\n",
    "supporting": [
      "01_Openai_api_files"
    ],
    "filters": [],
    "includes": {}
  }
}